PEP: 9999
Title: Aliased variables and ``alias`` keyword
Author: Finn Mason
Status: Draft
Type: Standards Track
Created: 24-Sep-2020
Post-History: 24-Sep-2020

Abstract
========
This PEP proposes a system to create "aliases" to variables that are accessed with long variable names due to dotted-attribute notation, causing the programmer to repetitively write long phrases to access some object attributes. This is not only frustrating to the programmer, but also adds many bytes to files that could be shorter.

Motivation
==========
Currently, to access and edit ``obj.attr.val``, for example, the programmer has to repeatedly write ``obj.attr.val`` throughout their code if it is accessed many times. Wouldn't it be nice to create an "alias" to ``obj.attr.val`` so that you didn't have to keep writing ``obj.attr.val`` (and, for someone looking through the code, not to mention this PEP, so that you didn't have to keep *reading* ``obj.attr.val``)? The solution, of course, is to write a variable that stores the value! And this works!... for mutable data types. Take the following example::

  >>> obj.attr.val = [1, 2]
  >>> alias = obj.attr.val
  >>> alias
  [1, 2]
  >>> alias.append(3)
  >>> alias
  [1, 2, 3]
  >>> obj.attr.val
  [1, 2, 3]
  >>> alias *= 2
  >>> alias
  [1, 2, 3, 1, 2, 3]
  >>> obj.attr.val
  [1, 2, 3, 1, 2, 3]
  >>> # Presumably we do more things with obj.attr.val

However, this changes if ``obj.attr.val`` is immutable::

  >>> obj.attr.val = 4
  >>> alias = obj.attr.val
  >>> obj.attr.val
  4
  >>> alias # Works so far...
  4
  >>> alias += 1
  >>> alias *= 2
  >>> alias
  10
  >>> obj.attr.val  # Darn it
  4
  >>>
  
We'd have to keep calling ``obj.attr.val`` if we wanted it to change::
  
  >>> obj.attr.val = 4
  >>> obj.attr.val += 1
  >>> obj.attr.val *= 2
  >>> obj.attr.val
  10
  >>>
  
Assuming we do more things with ``obj.attr.val``, this is rather annoying (and in reality, the name of ``obj.attr.val`` would probably be longer). Wouldn't it be nice to see something like this::

  >>> obj.attr.val
  4
  >>> alias
  4
  >>> alias += 1
  >>> alias *= 2
  >>> alias
  10
  >>> obj.attr.val
  10
  

